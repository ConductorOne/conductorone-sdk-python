"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .appgroupapproval import AppGroupApproval
from .appownerapproval import AppOwnerApproval
from .entitlementownerapproval import EntitlementOwnerApproval
from .expressionapproval import ExpressionApproval
from .managerapproval import ManagerApproval
from .selfapproval import SelfApproval
from .userapproval import UserApproval
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Approval:
    r"""The Approval message.

    This message contains a oneof named typ. Only a single field of the following list may be set at a time:
      - users
      - manager
      - appOwners
      - group
      - self
      - entitlementOwners
      - expression
    """
    UNSET='__SPEAKEASY_UNSET__'
    app_group_approval: Optional[AppGroupApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The AppGroupApproval object provides the configuration for setting a group as the approvers of an approval policy step."""
    app_owner_approval: Optional[AppOwnerApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appOwners'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""App owner approval provides the configuration for an approval step when the app owner is the target."""
    entitlement_owner_approval: Optional[EntitlementOwnerApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entitlementOwners'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The entitlement owner approval allows configuration of the approval step when the target approvers are the entitlement owners."""
    expression_approval: Optional[ExpressionApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The ExpressionApproval message."""
    manager_approval: Optional[ManagerApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manager'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The manager approval object provides configuration options for approval when the target of the approval is the manager of the user in the task."""
    self_approval: Optional[SelfApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The self approval object describes the configuration of a policy step that needs to be approved by the target of the request."""
    user_approval: Optional[UserApproval] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is Approval.UNSET }})
    r"""The user approval object describes the approval configuration of a policy step that needs to be approved by a specific list of users."""
    allow_reassignment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowReassignment'), 'exclude': lambda f: f is None }})
    r"""Configuration to allow reassignment by reviewers during this step."""
    assigned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigned'), 'exclude': lambda f: f is None }})
    r"""A field indicating whether this step is assigned."""
    require_approval_reason: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireApprovalReason'), 'exclude': lambda f: f is None }})
    r"""Configuration to require a reason when approving this step."""
    require_denial_reason: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireDenialReason'), 'exclude': lambda f: f is None }})
    r"""Configuration to require a reason when denying this step."""
    require_reassignment_reason: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireReassignmentReason'), 'exclude': lambda f: f is None }})
    r"""Configuration to require a reason when reassigning this step."""
    

