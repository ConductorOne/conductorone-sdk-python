"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import TypedDict
from typing_extensions import Annotated, NotRequired


class PolicyPostActionsTypedDict(TypedDict):
    r"""These are actions to happen after a policy is complete.

    This message contains a oneof named action. Only a single field of the following list may be set at a time:
    - certifyRemediateImmediately

    """
    
    certify_remediate_immediately: NotRequired[Nullable[bool]]
    r"""ONLY valid when used in a CERTIFY Ticket Type:
    Causes any deprovision or change in a grant to be applied when Certify Ticket is closed.
    This field is part of the `action` oneof.
    See the documentation for `c1.api.policy.v1.PolicyPostActions` for more details.
    """
    

class PolicyPostActions(BaseModel):
    r"""These are actions to happen after a policy is complete.

    This message contains a oneof named action. Only a single field of the following list may be set at a time:
    - certifyRemediateImmediately

    """
    
    certify_remediate_immediately: Annotated[OptionalNullable[bool], pydantic.Field(alias="certifyRemediateImmediately")] = UNSET
    r"""ONLY valid when used in a CERTIFY Ticket Type:
    Causes any deprovision or change in a grant to be applied when Certify Ticket is closed.
    This field is part of the `action` oneof.
    See the documentation for `c1.api.policy.v1.PolicyPostActions` for more details.
    """
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["certifyRemediateImmediately"]
        nullable_fields = ["certifyRemediateImmediately"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
