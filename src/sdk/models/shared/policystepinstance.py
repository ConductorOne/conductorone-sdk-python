"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .acceptinstance import AcceptInstance
from .approvalinstance import ApprovalInstance
from .provisioninstance import ProvisionInstance
from .rejectinstance import RejectInstance
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


class PolicyStepInstanceState(str, Enum):
    r"""The state of the step, which is either active or done."""
    POLICY_STEP_STATE_UNSPECIFIED = 'POLICY_STEP_STATE_UNSPECIFIED'
    POLICY_STEP_STATE_ACTIVE = 'POLICY_STEP_STATE_ACTIVE'
    POLICY_STEP_STATE_DONE = 'POLICY_STEP_STATE_DONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyStepInstance:
    r"""The policy step instance includes a reference to an instance of a policy step that tracks state and has a unique ID.

    This message contains a oneof named instance. Only a single field of the following list may be set at a time:
      - approval
      - provision
      - accept
      - reject
    """
    UNSET='__SPEAKEASY_UNSET__'
    accept_instance: Optional[AcceptInstance] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accept'), 'exclude': lambda f: f is PolicyStepInstance.UNSET }})
    r"""This policy step indicates that a ticket should have an approved outcome. This is a terminal approval state and is used to explicitly define the end of approval steps.
     The instance is just a marker for it being copied into an active policy.
    """
    approval_instance: Optional[ApprovalInstance] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval'), 'exclude': lambda f: f is PolicyStepInstance.UNSET }})
    r"""The approval instance object describes the way a policy step should be approved as well as its outcomes and state.

    This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
      - approved
      - denied
      - reassigned
      - restarted
      - reassignedByError
    """
    provision_instance: Optional[ProvisionInstance] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision'), 'exclude': lambda f: f is PolicyStepInstance.UNSET }})
    r"""A provision instance describes the specific configuration of an executing provision policy step including actions taken and notification id.

    This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
      - completed
      - cancelled
      - errored
      - reassignedByError
    """
    reject_instance: Optional[RejectInstance] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reject'), 'exclude': lambda f: f is PolicyStepInstance.UNSET }})
    r"""This policy step indicates that a ticket should have a denied outcome. This is a terminal approval state and is used to explicitly define the end of approval steps.
     The instance is just a marker for it being copied into an active policy.
    """
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the PolicyStepInstance. This is required by many action submission endpoints to indicate what step you're approving."""
    policy_generation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyGenerationId'), 'exclude': lambda f: f is None }})
    r"""The policy generation id refers to the version of the policy that this step was created from."""
    state: Optional[PolicyStepInstanceState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the step, which is either active or done."""
    

