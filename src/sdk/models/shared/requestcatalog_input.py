"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appentitlement import AppEntitlementInput, AppEntitlementInputTypedDict
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RequestCatalogInputTypedDict(TypedDict):
    r"""The RequestCatalog is used for managing which entitlements are requestable, and who can request them."""
    
    access_entitlements: NotRequired[Nullable[List[AppEntitlementInputTypedDict]]]
    r"""An array of app entitlements that, if the user has, can view the contents of this catalog."""
    app_ids: NotRequired[Nullable[List[str]]]
    r"""The Apps contained in this request catalog."""
    created_by_user_id: NotRequired[str]
    r"""The id of the user this request catalog was created by."""
    description: NotRequired[str]
    r"""The description of the request catalog."""
    display_name: NotRequired[str]
    r"""The display name of the request catalog."""
    id: NotRequired[str]
    r"""The id of the request catalog."""
    published: NotRequired[bool]
    r"""Whether or not this catalog is published."""
    request_bundle: NotRequired[bool]
    r"""Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this."""
    visible_to_everyone: NotRequired[bool]
    r"""If this is true, the access entitlement requirement is ignored."""
    

class RequestCatalogInput(BaseModel):
    r"""The RequestCatalog is used for managing which entitlements are requestable, and who can request them."""
    
    access_entitlements: Annotated[OptionalNullable[List[AppEntitlementInput]], pydantic.Field(alias="accessEntitlements")] = UNSET
    r"""An array of app entitlements that, if the user has, can view the contents of this catalog."""
    app_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="appIds")] = UNSET
    r"""The Apps contained in this request catalog."""
    created_by_user_id: Annotated[Optional[str], pydantic.Field(alias="createdByUserId")] = None
    r"""The id of the user this request catalog was created by."""
    description: Optional[str] = None
    r"""The description of the request catalog."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the request catalog."""
    id: Optional[str] = None
    r"""The id of the request catalog."""
    published: Optional[bool] = None
    r"""Whether or not this catalog is published."""
    request_bundle: Annotated[Optional[bool], pydantic.Field(alias="requestBundle")] = None
    r"""Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this."""
    visible_to_everyone: Annotated[Optional[bool], pydantic.Field(alias="visibleToEveryone")] = None
    r"""If this is true, the access entitlement requirement is ignored."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["accessEntitlements", "appIds", "createdByUserId", "description", "displayName", "id", "published", "requestBundle", "visibleToEveryone"]
        nullable_fields = ["accessEntitlements", "appIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
