"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appentitlement import AppEntitlementInput, AppEntitlementInputTypedDict
from .appentitlementexpandmask import AppEntitlementExpandMask, AppEntitlementExpandMaskTypedDict
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class UpdateAppEntitlementRequestTypedDict(TypedDict):
    r"""The UpdateAppEntitlementRequest message contains the app entitlement and the fields to be updated."""
    
    app_entitlement: NotRequired[AppEntitlementInputTypedDict]
    r"""The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    app_entitlement_expand_mask: NotRequired[AppEntitlementExpandMaskTypedDict]
    r"""The app entitlement expand mask allows the user to get additional information when getting responses containing app entitlement views."""
    override_access_requests_defaults: NotRequired[bool]
    r"""Flag to indicate that access request defaults, if any are applied to these entitlements, should be overridden."""
    update_mask: NotRequired[Nullable[str]]
    

class UpdateAppEntitlementRequest(BaseModel):
    r"""The UpdateAppEntitlementRequest message contains the app entitlement and the fields to be updated."""
    
    app_entitlement: Annotated[Optional[AppEntitlementInput], pydantic.Field(alias="entitlement")] = None
    r"""The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    app_entitlement_expand_mask: Annotated[Optional[AppEntitlementExpandMask], pydantic.Field(alias="expandMask")] = None
    r"""The app entitlement expand mask allows the user to get additional information when getting responses containing app entitlement views."""
    override_access_requests_defaults: Annotated[Optional[bool], pydantic.Field(alias="overrideAccessRequestsDefaults")] = None
    r"""Flag to indicate that access request defaults, if any are applied to these entitlements, should be overridden."""
    update_mask: Annotated[OptionalNullable[str], pydantic.Field(alias="updateMask")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["AppEntitlement", "AppEntitlementExpandMask", "overrideAccessRequestsDefaults", "updateMask"]
        nullable_fields = ["updateMask"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
