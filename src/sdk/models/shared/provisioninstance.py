"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .cancelledaction import CancelledAction
from .completedaction import CompletedAction
from .erroredaction import ErroredAction
from .provision import Provision
from .reassignedbyerroraction import ReassignedByErrorAction
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProvisionInstanceState(str, Enum):
    r"""This property indicates the current state of this step."""
    PROVISION_INSTANCE_STATE_UNSPECIFIED = 'PROVISION_INSTANCE_STATE_UNSPECIFIED'
    PROVISION_INSTANCE_STATE_INIT = 'PROVISION_INSTANCE_STATE_INIT'
    PROVISION_INSTANCE_STATE_CREATE_CONNECTOR_ACTIONS_FOR_TARGET = 'PROVISION_INSTANCE_STATE_CREATE_CONNECTOR_ACTIONS_FOR_TARGET'
    PROVISION_INSTANCE_STATE_SENDING_NOTIFICATIONS = 'PROVISION_INSTANCE_STATE_SENDING_NOTIFICATIONS'
    PROVISION_INSTANCE_STATE_WAITING = 'PROVISION_INSTANCE_STATE_WAITING'
    PROVISION_INSTANCE_STATE_DONE = 'PROVISION_INSTANCE_STATE_DONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionInstance:
    r"""A provision instance describes the specific configuration of an executing provision policy step including actions taken and notification id.

    This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
      - completed
      - cancelled
      - errored
      - reassignedByError
    """
    cancelled_action: Optional[CancelledAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelled') }})
    r"""The outcome of a provision instance that is cancelled."""
    completed_action: Optional[CompletedAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed') }})
    r"""The outcome of a provision instance that has been completed succesfully."""
    errored_action: Optional[ErroredAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errored') }})
    r"""The outcome of a provision instance that has errored."""
    notification_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationId'), 'exclude': lambda f: f is None }})
    r"""This indicates the notification id for this step."""
    provision: Optional[Provision] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision') }})
    r"""The provision step references a provision policy for this step."""
    reassigned_by_error_action: Optional[ReassignedByErrorAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reassignedByError') }})
    r"""The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning."""
    state: Optional[ProvisionInstanceState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""This property indicates the current state of this step."""
    

