"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ManualProvisionTypedDict(TypedDict):
    r"""Manual provisioning indicates that a human must intervene for the provisioning of this step."""
    
    instructions: NotRequired[str]
    r"""This field indicates a text body of instructions for the provisioner to indicate."""
    user_ids: NotRequired[Nullable[List[str]]]
    r"""An array of users that are required to provision during this step."""
    

class ManualProvision(BaseModel):
    r"""Manual provisioning indicates that a human must intervene for the provisioning of this step."""
    
    instructions: Optional[str] = None
    r"""This field indicates a text body of instructions for the provisioner to indicate."""
    user_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="userIds")] = UNSET
    r"""An array of users that are required to provision during this step."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["instructions", "userIds"]
        nullable_fields = ["userIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
