"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class SearchAttributeValuesRequestTypedDict(TypedDict):
    r"""Search Attributes by a few properties."""
    
    attribute_type_ids: NotRequired[Nullable[List[str]]]
    r"""The attribute type ids for what type of attributes to search for."""
    exclude_ids: NotRequired[Nullable[List[str]]]
    r"""Exclude attributes with these ids from the search results."""
    ids: NotRequired[Nullable[List[str]]]
    r"""Include attributes with these ids in the search results."""
    page_size: NotRequired[int]
    r"""The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)"""
    page_token: NotRequired[str]
    r"""The pageToken field."""
    query: NotRequired[str]
    r"""Query the attributes with a fuzzy search on display name and description."""
    value: NotRequired[str]
    r"""Search for attributes with a case insensitive match on the attribute value which is the attribute name."""
    

class SearchAttributeValuesRequest(BaseModel):
    r"""Search Attributes by a few properties."""
    
    attribute_type_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="attributeTypeIds")] = UNSET
    r"""The attribute type ids for what type of attributes to search for."""
    exclude_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="excludeIds")] = UNSET
    r"""Exclude attributes with these ids from the search results."""
    ids: OptionalNullable[List[str]] = UNSET
    r"""Include attributes with these ids in the search results."""
    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)"""
    page_token: Annotated[Optional[str], pydantic.Field(alias="pageToken")] = None
    r"""The pageToken field."""
    query: Optional[str] = None
    r"""Query the attributes with a fuzzy search on display name and description."""
    value: Optional[str] = None
    r"""Search for attributes with a case insensitive match on the attribute value which is the attribute name."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["attributeTypeIds", "excludeIds", "ids", "pageSize", "pageToken", "query", "value"]
        nullable_fields = ["attributeTypeIds", "excludeIds", "ids"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
