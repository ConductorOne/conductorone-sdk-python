"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .connector import ConnectorInput, ConnectorInputTypedDict
from .connectorexpandmask import ConnectorExpandMask, ConnectorExpandMaskTypedDict
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ConnectorServiceUpdateRequestTypedDict(TypedDict):
    r"""The ConnectorServiceUpdateRequest message contains the fields required to update a connector."""
    
    connector: NotRequired[ConnectorInputTypedDict]
    r"""A Connector is used to sync objects into Apps"""
    connector_expand_mask: NotRequired[ConnectorExpandMaskTypedDict]
    r"""The ConnectorExpandMask is used to expand related objects on a connector."""
    update_mask: NotRequired[Nullable[str]]
    

class ConnectorServiceUpdateRequest(BaseModel):
    r"""The ConnectorServiceUpdateRequest message contains the fields required to update a connector."""
    
    connector: Optional[ConnectorInput] = None
    r"""A Connector is used to sync objects into Apps"""
    connector_expand_mask: Annotated[Optional[ConnectorExpandMask], pydantic.Field(alias="expandMask")] = None
    r"""The ConnectorExpandMask is used to expand related objects on a connector."""
    update_mask: Annotated[OptionalNullable[str], pydantic.Field(alias="updateMask")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["Connector", "ConnectorExpandMask", "updateMask"]
        nullable_fields = ["updateMask"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
