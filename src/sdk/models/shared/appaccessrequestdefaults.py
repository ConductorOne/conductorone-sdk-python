"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class DurationUnsetTypedDict(TypedDict):
    pass
    

class DurationUnset(BaseModel):
    pass
    

class State(str, Enum):
    r"""The last applied state of the app access request defaults."""
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_UNSPECIFIED = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_UNSPECIFIED"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_RUNNING = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_RUNNING"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_SUCCESS = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_SUCCESS"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_FAILED = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_FAILED"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCELING = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCELING"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCEL_SUCCESS = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCEL_SUCCESS"
    APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCEL_ERROR = "APP_ACCESS_REQUEST_DEFAULTS_LAST_APPLY_STATE_CANCEL_ERROR"

class AppAccessRequestDefaultsTypedDict(TypedDict):
    r"""The AppAccessRequestDefaults message.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    
    app_id: NotRequired[str]
    r"""The app id for the app access request rule"""
    catalog_ids: NotRequired[Nullable[List[str]]]
    r"""The request catalog ids for the app access request rule."""
    defaults_enabled: NotRequired[bool]
    r"""If true the app level request configuration will be applied to specified resource types."""
    duration_grant: NotRequired[str]
    duration_unset: NotRequired[Nullable[DurationUnsetTypedDict]]
    emergency_grant_enabled: NotRequired[bool]
    r"""If emergency grants are enabled for this app access request rule."""
    emergency_grant_policy_id: NotRequired[str]
    r"""The policy id for the emergency grant policy."""
    request_policy_id: NotRequired[str]
    r"""The requestPolicyId field."""
    resource_type_ids: NotRequired[Nullable[List[str]]]
    r"""The app resource type ids for which the app access request defaults are applied."""
    state: NotRequired[State]
    r"""The last applied state of the app access request defaults."""
    

class AppAccessRequestDefaults(BaseModel):
    r"""The AppAccessRequestDefaults message.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    
    app_id: Annotated[Optional[str], pydantic.Field(alias="appId")] = None
    r"""The app id for the app access request rule"""
    catalog_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="catalogIds")] = UNSET
    r"""The request catalog ids for the app access request rule."""
    defaults_enabled: Annotated[Optional[bool], pydantic.Field(alias="defaultsEnabled")] = None
    r"""If true the app level request configuration will be applied to specified resource types."""
    duration_grant: Annotated[Optional[str], pydantic.Field(alias="durationGrant")] = None
    duration_unset: Annotated[OptionalNullable[DurationUnset], pydantic.Field(alias="durationUnset")] = UNSET
    emergency_grant_enabled: Annotated[Optional[bool], pydantic.Field(alias="emergencyGrantEnabled")] = None
    r"""If emergency grants are enabled for this app access request rule."""
    emergency_grant_policy_id: Annotated[Optional[str], pydantic.Field(alias="emergencyGrantPolicyId")] = None
    r"""The policy id for the emergency grant policy."""
    request_policy_id: Annotated[Optional[str], pydantic.Field(alias="requestPolicyId")] = None
    r"""The requestPolicyId field."""
    resource_type_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="resourceTypeIds")] = UNSET
    r"""The app resource type ids for which the app access request defaults are applied."""
    state: Optional[State] = None
    r"""The last applied state of the app access request defaults."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["appId", "catalogIds", "defaultsEnabled", "durationGrant", "durationUnset", "emergencyGrantEnabled", "emergencyGrantPolicyId", "requestPolicyId", "resourceTypeIds", "state"]
        nullable_fields = ["catalogIds", "durationUnset", "resourceTypeIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        

class AppAccessRequestDefaults1TypedDict(TypedDict):
    r"""The AppAccessRequestDefaults message.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    
    catalog_ids: NotRequired[Nullable[List[str]]]
    r"""The request catalog ids for the app access request rule."""
    defaults_enabled: NotRequired[bool]
    r"""If true the app level request configuration will be applied to specified resource types."""
    duration_grant: NotRequired[str]
    duration_unset: NotRequired[Nullable[DurationUnsetTypedDict]]
    emergency_grant_enabled: NotRequired[bool]
    r"""If emergency grants are enabled for this app access request rule."""
    emergency_grant_policy_id: NotRequired[str]
    r"""The policy id for the emergency grant policy."""
    request_policy_id: NotRequired[str]
    r"""The requestPolicyId field."""
    resource_type_ids: NotRequired[Nullable[List[str]]]
    r"""The app resource type ids for which the app access request defaults are applied."""
    state: NotRequired[State]
    r"""The last applied state of the app access request defaults."""
    

class AppAccessRequestDefaults1(BaseModel):
    r"""The AppAccessRequestDefaults message.

    This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
    - durationUnset
    - durationGrant

    """
    
    catalog_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="catalogIds")] = UNSET
    r"""The request catalog ids for the app access request rule."""
    defaults_enabled: Annotated[Optional[bool], pydantic.Field(alias="defaultsEnabled")] = None
    r"""If true the app level request configuration will be applied to specified resource types."""
    duration_grant: Annotated[Optional[str], pydantic.Field(alias="durationGrant")] = None
    duration_unset: Annotated[OptionalNullable[DurationUnset], pydantic.Field(alias="durationUnset")] = UNSET
    emergency_grant_enabled: Annotated[Optional[bool], pydantic.Field(alias="emergencyGrantEnabled")] = None
    r"""If emergency grants are enabled for this app access request rule."""
    emergency_grant_policy_id: Annotated[Optional[str], pydantic.Field(alias="emergencyGrantPolicyId")] = None
    r"""The policy id for the emergency grant policy."""
    request_policy_id: Annotated[Optional[str], pydantic.Field(alias="requestPolicyId")] = None
    r"""The requestPolicyId field."""
    resource_type_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="resourceTypeIds")] = UNSET
    r"""The app resource type ids for which the app access request defaults are applied."""
    state: Optional[State] = None
    r"""The last applied state of the app access request defaults."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["catalogIds", "defaultsEnabled", "durationGrant", "durationUnset", "emergencyGrantEnabled", "emergencyGrantPolicyId", "requestPolicyId", "resourceTypeIds", "state"]
        nullable_fields = ["catalogIds", "durationUnset", "resourceTypeIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
