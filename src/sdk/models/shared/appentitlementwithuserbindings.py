"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appentitlementuserbinding import AppEntitlementUserBinding, AppEntitlementUserBindingTypedDict
from .appentitlementview import AppEntitlementView, AppEntitlementViewTypedDict
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AppEntitlementWithUserBindingsTypedDict(TypedDict):
    r"""The AppEntitlementWithUserBindings message represents an app entitlement and its associated user bindings."""
    
    app_entitlement_view: NotRequired[AppEntitlementViewTypedDict]
    r"""The app entitlement view contains the serialized app entitlement and paths to objects referenced by the app entitlement."""
    app_entitlement_user_bindings: NotRequired[Nullable[List[AppEntitlementUserBindingTypedDict]]]
    r"""An array of AppEntitlementUserBinding objects which represent the relationships that give app users access to the specific app entitlement."""
    

class AppEntitlementWithUserBindings(BaseModel):
    r"""The AppEntitlementWithUserBindings message represents an app entitlement and its associated user bindings."""
    
    app_entitlement_view: Annotated[Optional[AppEntitlementView], pydantic.Field(alias="entitlement")] = None
    r"""The app entitlement view contains the serialized app entitlement and paths to objects referenced by the app entitlement."""
    app_entitlement_user_bindings: Annotated[OptionalNullable[List[AppEntitlementUserBinding]], pydantic.Field(alias="appEntitlementUserBindings")] = UNSET
    r"""An array of AppEntitlementUserBinding objects which represent the relationships that give app users access to the specific app entitlement."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["AppEntitlementView", "appEntitlementUserBindings"]
        nullable_fields = ["appEntitlementUserBindings"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
