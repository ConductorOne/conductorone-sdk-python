"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .connectorstatus import ConnectorStatus, ConnectorStatusTypedDict
from .oauth2authorizedas import OAuth2AuthorizedAs, OAuth2AuthorizedAsTypedDict
from .oauth2authorizedas_input import OAuth2AuthorizedAsInput, OAuth2AuthorizedAsInputTypedDict
from datetime import datetime
import pydantic
from pydantic import ConfigDict, model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ConfigTypedDict(TypedDict):
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    
    at_type: NotRequired[str]
    r"""The type of the serialized message."""
    

class Config(BaseModel):
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    at_type: Annotated[Optional[str], pydantic.Field(alias="@type")] = None
    r"""The type of the serialized message."""
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    

class ConnectorTypedDict(TypedDict):
    r"""A Connector is used to sync objects into Apps"""
    
    connector_status: NotRequired[ConnectorStatusTypedDict]
    r"""The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update."""
    o_auth2_authorized_as: NotRequired[OAuth2AuthorizedAsTypedDict]
    r"""OAuth2AuthorizedAs tracks the user that OAuthed with the connector."""
    app_id: NotRequired[str]
    r"""The id of the app the connector is associated with."""
    catalog_id: NotRequired[str]
    r"""The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector."""
    config: NotRequired[ConfigTypedDict]
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    created_at: NotRequired[datetime]
    deleted_at: NotRequired[datetime]
    description: NotRequired[str]
    r"""The description of the connector."""
    display_name: NotRequired[str]
    r"""The display name of the connector."""
    download_url: NotRequired[str]
    r"""The downloadUrl for a spreadsheet if the connector was created from uploading a file."""
    id: NotRequired[str]
    r"""The id of the connector."""
    updated_at: NotRequired[datetime]
    user_ids: NotRequired[Nullable[List[str]]]
    r"""The userIds field is used to define the integration owners of the connector."""
    

class Connector(BaseModel):
    r"""A Connector is used to sync objects into Apps"""
    
    connector_status: Annotated[Optional[ConnectorStatus], pydantic.Field(alias="status")] = None
    r"""The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update."""
    o_auth2_authorized_as: Annotated[Optional[OAuth2AuthorizedAs], pydantic.Field(alias="oauthAuthorizedAs")] = None
    r"""OAuth2AuthorizedAs tracks the user that OAuthed with the connector."""
    app_id: Annotated[Optional[str], pydantic.Field(alias="appId")] = None
    r"""The id of the app the connector is associated with."""
    catalog_id: Annotated[Optional[str], pydantic.Field(alias="catalogId")] = None
    r"""The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector."""
    config: Optional[Config] = None
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    deleted_at: Annotated[Optional[datetime], pydantic.Field(alias="deletedAt")] = None
    description: Optional[str] = None
    r"""The description of the connector."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the connector."""
    download_url: Annotated[Optional[str], pydantic.Field(alias="downloadUrl")] = None
    r"""The downloadUrl for a spreadsheet if the connector was created from uploading a file."""
    id: Optional[str] = None
    r"""The id of the connector."""
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    user_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="userIds")] = UNSET
    r"""The userIds field is used to define the integration owners of the connector."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["ConnectorStatus", "OAuth2AuthorizedAs", "appId", "catalogId", "config", "createdAt", "deletedAt", "description", "displayName", "downloadUrl", "id", "updatedAt", "userIds"]
        nullable_fields = ["userIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class ConnectorInputTypedDict(TypedDict):
    r"""A Connector is used to sync objects into Apps"""
    
    connector_status: NotRequired[ConnectorStatusTypedDict]
    r"""The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update."""
    o_auth2_authorized_as: NotRequired[OAuth2AuthorizedAsInputTypedDict]
    r"""OAuth2AuthorizedAs tracks the user that OAuthed with the connector."""
    app_id: NotRequired[str]
    r"""The id of the app the connector is associated with."""
    config: NotRequired[ConfigTypedDict]
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    description: NotRequired[str]
    r"""The description of the connector."""
    display_name: NotRequired[str]
    r"""The display name of the connector."""
    id: NotRequired[str]
    r"""The id of the connector."""
    user_ids: NotRequired[Nullable[List[str]]]
    r"""The userIds field is used to define the integration owners of the connector."""
    

class ConnectorInput(BaseModel):
    r"""A Connector is used to sync objects into Apps"""
    
    connector_status: Annotated[Optional[ConnectorStatus], pydantic.Field(alias="status")] = None
    r"""The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update."""
    o_auth2_authorized_as: Annotated[Optional[OAuth2AuthorizedAsInput], pydantic.Field(alias="oauthAuthorizedAs")] = None
    r"""OAuth2AuthorizedAs tracks the user that OAuthed with the connector."""
    app_id: Annotated[Optional[str], pydantic.Field(alias="appId")] = None
    r"""The id of the app the connector is associated with."""
    config: Optional[Config] = None
    r"""Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."""
    description: Optional[str] = None
    r"""The description of the connector."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the connector."""
    id: Optional[str] = None
    r"""The id of the connector."""
    user_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="userIds")] = UNSET
    r"""The userIds field is used to define the integration owners of the connector."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["ConnectorStatus", "OAuth2AuthorizedAs", "appId", "config", "description", "displayName", "id", "userIds"]
        nullable_fields = ["userIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
