"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetcategory import FacetCategory, FacetCategoryTypedDict
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from sdk.utils import serialize_int, validate_int
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class FacetsTypedDict(TypedDict):
    r"""Indicates one value of a facet."""
    
    count: NotRequired[int]
    r"""The count of items in this facet."""
    facets: NotRequired[Nullable[List[FacetCategoryTypedDict]]]
    r"""The facet being referenced."""
    

class Facets(BaseModel):
    r"""Indicates one value of a facet."""
    
    count: Annotated[Optional[int], BeforeValidator(validate_int), PlainSerializer(serialize_int(True))] = None
    r"""The count of items in this facet."""
    facets: OptionalNullable[List[FacetCategory]] = UNSET
    r"""The facet being referenced."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["count", "facets"]
        nullable_fields = ["facets"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
