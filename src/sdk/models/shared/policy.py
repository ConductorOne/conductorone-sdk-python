"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .policypostactions import PolicyPostActions, PolicyPostActionsTypedDict
from .policysteps import PolicySteps, PolicyStepsTypedDict
from .rule import Rule, RuleTypedDict
from datetime import datetime
from enum import Enum
import pydantic
from pydantic import model_serializer
from sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing import Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class PolicyPolicyType(str, Enum):
    r"""Indicates the type of this policy. Can also be used to get the value from policySteps."""
    POLICY_TYPE_UNSPECIFIED = "POLICY_TYPE_UNSPECIFIED"
    POLICY_TYPE_GRANT = "POLICY_TYPE_GRANT"
    POLICY_TYPE_REVOKE = "POLICY_TYPE_REVOKE"
    POLICY_TYPE_CERTIFY = "POLICY_TYPE_CERTIFY"
    POLICY_TYPE_ACCESS_REQUEST = "POLICY_TYPE_ACCESS_REQUEST"
    POLICY_TYPE_PROVISION = "POLICY_TYPE_PROVISION"

class PolicyTypedDict(TypedDict):
    r"""A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes."""
    
    created_at: NotRequired[datetime]
    deleted_at: NotRequired[datetime]
    description: NotRequired[str]
    r"""The description of the Policy."""
    display_name: NotRequired[str]
    r"""The display name of the Policy."""
    id: NotRequired[str]
    r"""The ID of the Policy."""
    policy_steps: NotRequired[Dict[str, PolicyStepsTypedDict]]
    r"""A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set."""
    policy_type: NotRequired[PolicyPolicyType]
    r"""Indicates the type of this policy. Can also be used to get the value from policySteps."""
    post_actions: NotRequired[Nullable[List[PolicyPostActionsTypedDict]]]
    r"""An array of actions (ordered) to take place after a policy completes processing."""
    reassign_tasks_to_delegates: NotRequired[bool]
    r"""A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation refers to the individual delegates users set on their account."""
    rules: NotRequired[Nullable[List[RuleTypedDict]]]
    r"""The rules field."""
    system_builtin: NotRequired[bool]
    r"""Whether this policy is a builtin system policy. Builtin system policies cannot be edited."""
    updated_at: NotRequired[datetime]
    

class Policy(BaseModel):
    r"""A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes."""
    
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    deleted_at: Annotated[Optional[datetime], pydantic.Field(alias="deletedAt")] = None
    description: Optional[str] = None
    r"""The description of the Policy."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the Policy."""
    id: Optional[str] = None
    r"""The ID of the Policy."""
    policy_steps: Annotated[Optional[Dict[str, PolicySteps]], pydantic.Field(alias="policySteps")] = None
    r"""A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set."""
    policy_type: Annotated[Optional[PolicyPolicyType], pydantic.Field(alias="policyType")] = None
    r"""Indicates the type of this policy. Can also be used to get the value from policySteps."""
    post_actions: Annotated[OptionalNullable[List[PolicyPostActions]], pydantic.Field(alias="postActions")] = UNSET
    r"""An array of actions (ordered) to take place after a policy completes processing."""
    reassign_tasks_to_delegates: Annotated[Optional[bool], pydantic.Field(alias="reassignTasksToDelegates")] = None
    r"""A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation refers to the individual delegates users set on their account."""
    rules: OptionalNullable[List[Rule]] = UNSET
    r"""The rules field."""
    system_builtin: Annotated[Optional[bool], pydantic.Field(alias="systemBuiltin")] = None
    r"""Whether this policy is a builtin system policy. Builtin system policies cannot be edited."""
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["createdAt", "deletedAt", "description", "displayName", "id", "policySteps", "policyType", "postActions", "reassignTasksToDelegates", "rules", "systemBuiltin", "updatedAt"]
        nullable_fields = ["postActions", "rules"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        

class PolicyInputTypedDict(TypedDict):
    r"""A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes."""
    
    description: NotRequired[str]
    r"""The description of the Policy."""
    display_name: NotRequired[str]
    r"""The display name of the Policy."""
    policy_steps: NotRequired[Dict[str, PolicyStepsTypedDict]]
    r"""A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set."""
    policy_type: NotRequired[PolicyPolicyType]
    r"""Indicates the type of this policy. Can also be used to get the value from policySteps."""
    post_actions: NotRequired[Nullable[List[PolicyPostActionsTypedDict]]]
    r"""An array of actions (ordered) to take place after a policy completes processing."""
    reassign_tasks_to_delegates: NotRequired[bool]
    r"""A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation refers to the individual delegates users set on their account."""
    rules: NotRequired[Nullable[List[RuleTypedDict]]]
    r"""The rules field."""
    

class PolicyInput(BaseModel):
    r"""A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes."""
    
    description: Optional[str] = None
    r"""The description of the Policy."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the Policy."""
    policy_steps: Annotated[Optional[Dict[str, PolicySteps]], pydantic.Field(alias="policySteps")] = None
    r"""A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set."""
    policy_type: Annotated[Optional[PolicyPolicyType], pydantic.Field(alias="policyType")] = None
    r"""Indicates the type of this policy. Can also be used to get the value from policySteps."""
    post_actions: Annotated[OptionalNullable[List[PolicyPostActions]], pydantic.Field(alias="postActions")] = UNSET
    r"""An array of actions (ordered) to take place after a policy completes processing."""
    reassign_tasks_to_delegates: Annotated[Optional[bool], pydantic.Field(alias="reassignTasksToDelegates")] = None
    r"""A policy configuration option that allows for reassinging tasks to delgated users. This level of delegation refers to the individual delegates users set on their account."""
    rules: OptionalNullable[List[Rule]] = UNSET
    r"""The rules field."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "displayName", "policySteps", "policyType", "postActions", "reassignTasksToDelegates", "rules"]
        nullable_fields = ["postActions", "rules"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
