"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RoleTypedDict(TypedDict):
    r"""Role is a role that can be assigned to a user in ConductorOne."""
    
    created_at: NotRequired[datetime]
    deleted_at: NotRequired[datetime]
    display_name: NotRequired[str]
    r"""The display name of the role."""
    id: NotRequired[str]
    r"""The id of the role."""
    name: NotRequired[str]
    r"""The internal name of the role."""
    permissions: NotRequired[Nullable[List[str]]]
    r"""The list of permissions this role has."""
    service_roles: NotRequired[Nullable[List[str]]]
    r"""The list of serviceRoles that this role has."""
    system_builtin: NotRequired[bool]
    r"""The system builtin field. If this field is set, the role is not editable."""
    updated_at: NotRequired[datetime]
    

class Role(BaseModel):
    r"""Role is a role that can be assigned to a user in ConductorOne."""
    
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    deleted_at: Annotated[Optional[datetime], pydantic.Field(alias="deletedAt")] = None
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the role."""
    id: Optional[str] = None
    r"""The id of the role."""
    name: Optional[str] = None
    r"""The internal name of the role."""
    permissions: OptionalNullable[List[str]] = UNSET
    r"""The list of permissions this role has."""
    service_roles: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="serviceRoles")] = UNSET
    r"""The list of serviceRoles that this role has."""
    system_builtin: Annotated[Optional[bool], pydantic.Field(alias="systemBuiltin")] = None
    r"""The system builtin field. If this field is set, the role is not editable."""
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["createdAt", "deletedAt", "displayName", "id", "name", "permissions", "serviceRoles", "systemBuiltin", "updatedAt"]
        nullable_fields = ["permissions", "serviceRoles"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
