"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .userattributemappingsource import UserAttributeMappingSource, UserAttributeMappingSourceTypedDict
from datetime import datetime
from enum import Enum
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class DirectoryStatus(str, Enum):
    r"""The status of the user in the directory."""
    UNKNOWN = "UNKNOWN"
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    DELETED = "DELETED"

class UserStatus(str, Enum):
    r"""The status of the user in the system."""
    UNKNOWN = "UNKNOWN"
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    DELETED = "DELETED"

class UserTypedDict(TypedDict):
    r"""The User object provides all of the details for an user, as well as some configuration."""
    
    created_at: NotRequired[datetime]
    delegated_user_id: NotRequired[str]
    r"""The id of the user to whom tasks will be automatically reassigned to."""
    deleted_at: NotRequired[datetime]
    department: NotRequired[str]
    r"""The department which the user belongs to in the organization."""
    department_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on department attribute mappings configured in the system."""
    directory_ids: NotRequired[Nullable[List[str]]]
    r"""A list of unique ids that represent different directories."""
    directory_status: NotRequired[DirectoryStatus]
    r"""The status of the user in the directory."""
    directory_status_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on directoryStatus attribute mappings configured in the system."""
    display_name: NotRequired[str]
    r"""The display name of the user."""
    email: NotRequired[str]
    r"""This is the user's email."""
    emails: NotRequired[Nullable[List[str]]]
    r"""This is a list of all of the user's emails from app users."""
    employment_status: NotRequired[str]
    r"""The users employment status."""
    employment_status_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on employmentStatus attribute mappings configured in the system."""
    employment_type: NotRequired[str]
    r"""The employment type of the user."""
    employment_type_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on employmentType attribute mappings configured in the system."""
    id: NotRequired[str]
    r"""A unique identifier of the user."""
    job_title: NotRequired[str]
    r"""The job title of the user."""
    job_title_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on jobTitle attribute mappings configured in the system."""
    manager_ids: NotRequired[Nullable[List[str]]]
    r"""A list of ids of the user's managers."""
    manager_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of objects mapped based on managerId attribute mappings configured in the system."""
    profile: NotRequired[Dict[str, Any]]
    role_ids: NotRequired[Nullable[List[str]]]
    r"""A list of unique identifiers that maps to ConductorOne’s user roles let you assign users permissions tailored to the work they do in the software."""
    status: NotRequired[UserStatus]
    r"""The status of the user in the system."""
    updated_at: NotRequired[datetime]
    username: NotRequired[str]
    r"""This is the user's primary username. Typically sourced from the primary directory."""
    username_sources: NotRequired[Nullable[List[UserAttributeMappingSourceTypedDict]]]
    r"""A list of source data for the usernames attribute."""
    usernames: NotRequired[Nullable[List[str]]]
    r"""This is a list of all of the user's usernames from app users."""
    

class User(BaseModel):
    r"""The User object provides all of the details for an user, as well as some configuration."""
    
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    delegated_user_id: Annotated[Optional[str], pydantic.Field(alias="delegatedUserId")] = None
    r"""The id of the user to whom tasks will be automatically reassigned to."""
    deleted_at: Annotated[Optional[datetime], pydantic.Field(alias="deletedAt")] = None
    department: Optional[str] = None
    r"""The department which the user belongs to in the organization."""
    department_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="departmentSources")] = UNSET
    r"""A list of objects mapped based on department attribute mappings configured in the system."""
    directory_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="directoryIds")] = UNSET
    r"""A list of unique ids that represent different directories."""
    directory_status: Annotated[Optional[DirectoryStatus], pydantic.Field(alias="directoryStatus")] = None
    r"""The status of the user in the directory."""
    directory_status_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="directoryStatusSources")] = UNSET
    r"""A list of objects mapped based on directoryStatus attribute mappings configured in the system."""
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the user."""
    email: Optional[str] = None
    r"""This is the user's email."""
    emails: OptionalNullable[List[str]] = UNSET
    r"""This is a list of all of the user's emails from app users."""
    employment_status: Annotated[Optional[str], pydantic.Field(alias="employmentStatus")] = None
    r"""The users employment status."""
    employment_status_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="employmentStatusSources")] = UNSET
    r"""A list of objects mapped based on employmentStatus attribute mappings configured in the system."""
    employment_type: Annotated[Optional[str], pydantic.Field(alias="employmentType")] = None
    r"""The employment type of the user."""
    employment_type_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="employmentTypeSources")] = UNSET
    r"""A list of objects mapped based on employmentType attribute mappings configured in the system."""
    id: Optional[str] = None
    r"""A unique identifier of the user."""
    job_title: Annotated[Optional[str], pydantic.Field(alias="jobTitle")] = None
    r"""The job title of the user."""
    job_title_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="jobTitleSources")] = UNSET
    r"""A list of objects mapped based on jobTitle attribute mappings configured in the system."""
    manager_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="managerIds")] = UNSET
    r"""A list of ids of the user's managers."""
    manager_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="managerSources")] = UNSET
    r"""A list of objects mapped based on managerId attribute mappings configured in the system."""
    profile: Optional[Dict[str, Any]] = None
    role_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="roleIds")] = UNSET
    r"""A list of unique identifiers that maps to ConductorOne’s user roles let you assign users permissions tailored to the work they do in the software."""
    status: Optional[UserStatus] = None
    r"""The status of the user in the system."""
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    username: Optional[str] = None
    r"""This is the user's primary username. Typically sourced from the primary directory."""
    username_sources: Annotated[OptionalNullable[List[UserAttributeMappingSource]], pydantic.Field(alias="usernameSources")] = UNSET
    r"""A list of source data for the usernames attribute."""
    usernames: OptionalNullable[List[str]] = UNSET
    r"""This is a list of all of the user's usernames from app users."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["createdAt", "delegatedUserId", "deletedAt", "department", "departmentSources", "directoryIds", "directoryStatus", "directoryStatusSources", "displayName", "email", "emails", "employmentStatus", "employmentStatusSources", "employmentType", "employmentTypeSources", "id", "jobTitle", "jobTitleSources", "managerIds", "managerSources", "profile", "roleIds", "status", "updatedAt", "username", "usernameSources", "usernames"]
        nullable_fields = ["departmentSources", "directoryIds", "directoryStatusSources", "emails", "employmentStatusSources", "employmentTypeSources", "jobTitleSources", "managerIds", "managerSources", "roleIds", "usernameSources", "usernames"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
