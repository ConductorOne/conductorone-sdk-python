"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from openapi.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TaskTypeOffboardingOutcome(str, Enum):
    r"""The outcome field."""
    OFFBOARDING_OUTCOME_UNSPECIFIED = "OFFBOARDING_OUTCOME_UNSPECIFIED"
    OFFBOARDING_OUTCOME_IN_PROGRESS = "OFFBOARDING_OUTCOME_IN_PROGRESS"
    OFFBOARDING_OUTCOME_DONE = "OFFBOARDING_OUTCOME_DONE"
    OFFBOARDING_OUTCOME_ERROR = "OFFBOARDING_OUTCOME_ERROR"
    OFFBOARDING_OUTCOME_CANCELLED = "OFFBOARDING_OUTCOME_CANCELLED"

class TaskTypeOffboardingTypedDict(TypedDict):
    r"""The TaskTypeOffboarding message."""
    
    outcome: NotRequired[TaskTypeOffboardingOutcome]
    r"""The outcome field."""
    outcome_time: NotRequired[datetime]
    subject_user_id: NotRequired[str]
    r"""The subjectUserId field."""
    

class TaskTypeOffboarding(BaseModel):
    r"""The TaskTypeOffboarding message."""
    
    outcome: Optional[TaskTypeOffboardingOutcome] = None
    r"""The outcome field."""
    outcome_time: Annotated[Optional[datetime], pydantic.Field(alias="outcomeTime")] = None
    subject_user_id: Annotated[Optional[str], pydantic.Field(alias="subjectUserId")] = None
    r"""The subjectUserId field."""
    
