"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .taskrevokesourceexpired import TaskRevokeSourceExpired, TaskRevokeSourceExpiredTypedDict
from .taskrevokesourcenonusage import TaskRevokeSourceNonUsage, TaskRevokeSourceNonUsageTypedDict
from .taskrevokesourcerequest import TaskRevokeSourceRequest, TaskRevokeSourceRequestTypedDict
from .taskrevokesourcereview import TaskRevokeSourceReview, TaskRevokeSourceReviewTypedDict
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import Annotated, NotRequired


class TaskRevokeSourceTypedDict(TypedDict):
    r"""The TaskRevokeSource message indicates the source of the revoke task is one of expired, nonUsage, request, or review.

    This message contains a oneof named origin. Only a single field of the following list may be set at a time:
    - review
    - request
    - expired
    - nonUsage

    """
    
    task_revoke_source_expired: NotRequired[Nullable[TaskRevokeSourceExpiredTypedDict]]
    r"""The TaskRevokeSourceExpired message indicates that the source of the revoke task is due to a grant expiring."""
    task_revoke_source_non_usage: NotRequired[Nullable[TaskRevokeSourceNonUsageTypedDict]]
    r"""The TaskRevokeSourceNonUsage message indicates that the source of the revoke task is due to the grant not being used."""
    task_revoke_source_request: NotRequired[Nullable[TaskRevokeSourceRequestTypedDict]]
    r"""The TaskRevokeSourceRequest message indicates that the source of the revoke task was a request."""
    task_revoke_source_review: NotRequired[Nullable[TaskRevokeSourceReviewTypedDict]]
    r"""The TaskRevokeSourceReview message tracks which access review was the source of the specificed revoke ticket."""
    

class TaskRevokeSource(BaseModel):
    r"""The TaskRevokeSource message indicates the source of the revoke task is one of expired, nonUsage, request, or review.

    This message contains a oneof named origin. Only a single field of the following list may be set at a time:
    - review
    - request
    - expired
    - nonUsage

    """
    
    task_revoke_source_expired: Annotated[OptionalNullable[TaskRevokeSourceExpired], pydantic.Field(alias="expired")] = UNSET
    r"""The TaskRevokeSourceExpired message indicates that the source of the revoke task is due to a grant expiring."""
    task_revoke_source_non_usage: Annotated[OptionalNullable[TaskRevokeSourceNonUsage], pydantic.Field(alias="nonUsage")] = UNSET
    r"""The TaskRevokeSourceNonUsage message indicates that the source of the revoke task is due to the grant not being used."""
    task_revoke_source_request: Annotated[OptionalNullable[TaskRevokeSourceRequest], pydantic.Field(alias="request")] = UNSET
    r"""The TaskRevokeSourceRequest message indicates that the source of the revoke task was a request."""
    task_revoke_source_review: Annotated[OptionalNullable[TaskRevokeSourceReview], pydantic.Field(alias="review")] = UNSET
    r"""The TaskRevokeSourceReview message tracks which access review was the source of the specificed revoke ticket."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["TaskRevokeSourceExpired", "TaskRevokeSourceNonUsage", "TaskRevokeSourceRequest", "TaskRevokeSourceReview"]
        nullable_fields = ["TaskRevokeSourceExpired", "TaskRevokeSourceNonUsage", "TaskRevokeSourceRequest", "TaskRevokeSourceReview"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
