"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .webhookref import WebhookRef, WebhookRefTypedDict
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class WebhooksSearchRequestTypedDict(TypedDict):
    r"""The WebhooksSearchRequest message."""
    
    page_size: NotRequired[int]
    r"""The pageSize field."""
    page_token: NotRequired[str]
    r"""The pageToken field."""
    query: NotRequired[str]
    r"""The query field."""
    refs: NotRequired[Nullable[List[WebhookRefTypedDict]]]
    r"""The refs field."""
    

class WebhooksSearchRequest(BaseModel):
    r"""The WebhooksSearchRequest message."""
    
    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""The pageSize field."""
    page_token: Annotated[Optional[str], pydantic.Field(alias="pageToken")] = None
    r"""The pageToken field."""
    query: Optional[str] = None
    r"""The query field."""
    refs: OptionalNullable[List[WebhookRef]] = UNSET
    r"""The refs field."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["pageSize", "pageToken", "query", "refs"]
        nullable_fields = ["refs"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
