"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appentitlementexpandmask import AppEntitlementExpandMask, AppEntitlementExpandMaskTypedDict
from .appentitlementref import AppEntitlementRef, AppEntitlementRefTypedDict
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AppEntitlementSearchServiceSearchRequestTypedDict(TypedDict):
    r"""Search app entitlements by a variety of filters."""
    
    app_entitlement_expand_mask: NotRequired[AppEntitlementExpandMaskTypedDict]
    r"""The app entitlement expand mask allows the user to get additional information when getting responses containing app entitlement views."""
    access_review_id: NotRequired[str]
    r"""Search for app entitlements that are being reviewed as part of this access review campaign."""
    alias: NotRequired[str]
    r"""Search for app entitlements that have this alias (exact match)."""
    app_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements contained in any of these apps."""
    app_user_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements that are granted to any of these app user ids."""
    compliance_framework_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements that are part of these compliace frameworks."""
    exclude_app_ids: NotRequired[Nullable[List[str]]]
    r"""Exclude app entitlements from the results that are in these app IDs."""
    exclude_app_user_ids: NotRequired[Nullable[List[str]]]
    r"""Exclude app entitlements from the results that these app users have granted."""
    include_deleted: NotRequired[bool]
    r"""Include deleted app entitlements, this includes app entitlements that have a deleted parent object (app, app resource, app resource type)"""
    is_automated: NotRequired[bool]
    r"""The isAutomated field."""
    only_get_expiring: NotRequired[bool]
    r"""Restrict results to only those who have expiring app entitlement user bindings."""
    page_size: NotRequired[int]
    r"""The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)"""
    page_token: NotRequired[str]
    r"""The pageToken field."""
    query: NotRequired[str]
    r"""Query the app entitlements with a fuzzy search on display name and description."""
    refs: NotRequired[Nullable[List[AppEntitlementRefTypedDict]]]
    r"""The refs field."""
    resource_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements that belongs to these resources."""
    resource_trait_ids: NotRequired[Nullable[List[str]]]
    r"""The resourceTraitIds field."""
    resource_type_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements that are for items with resources types that have matching names. Example names are \"group\", \"role\", and \"app\"."""
    risk_level_ids: NotRequired[Nullable[List[str]]]
    r"""Search for app entitlements with these risk levels."""
    

class AppEntitlementSearchServiceSearchRequest(BaseModel):
    r"""Search app entitlements by a variety of filters."""
    
    app_entitlement_expand_mask: Annotated[Optional[AppEntitlementExpandMask], pydantic.Field(alias="expandMask")] = None
    r"""The app entitlement expand mask allows the user to get additional information when getting responses containing app entitlement views."""
    access_review_id: Annotated[Optional[str], pydantic.Field(alias="accessReviewId")] = None
    r"""Search for app entitlements that are being reviewed as part of this access review campaign."""
    alias: Optional[str] = None
    r"""Search for app entitlements that have this alias (exact match)."""
    app_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="appIds")] = UNSET
    r"""Search for app entitlements contained in any of these apps."""
    app_user_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="appUserIds")] = UNSET
    r"""Search for app entitlements that are granted to any of these app user ids."""
    compliance_framework_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="complianceFrameworkIds")] = UNSET
    r"""Search for app entitlements that are part of these compliace frameworks."""
    exclude_app_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="excludeAppIds")] = UNSET
    r"""Exclude app entitlements from the results that are in these app IDs."""
    exclude_app_user_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="excludeAppUserIds")] = UNSET
    r"""Exclude app entitlements from the results that these app users have granted."""
    include_deleted: Annotated[Optional[bool], pydantic.Field(alias="includeDeleted")] = None
    r"""Include deleted app entitlements, this includes app entitlements that have a deleted parent object (app, app resource, app resource type)"""
    is_automated: Annotated[Optional[bool], pydantic.Field(alias="isAutomated")] = None
    r"""The isAutomated field."""
    only_get_expiring: Annotated[Optional[bool], pydantic.Field(alias="onlyGetExpiring")] = None
    r"""Restrict results to only those who have expiring app entitlement user bindings."""
    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)"""
    page_token: Annotated[Optional[str], pydantic.Field(alias="pageToken")] = None
    r"""The pageToken field."""
    query: Optional[str] = None
    r"""Query the app entitlements with a fuzzy search on display name and description."""
    refs: OptionalNullable[List[AppEntitlementRef]] = UNSET
    r"""The refs field."""
    resource_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="resourceIds")] = UNSET
    r"""Search for app entitlements that belongs to these resources."""
    resource_trait_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="resourceTraitIds")] = UNSET
    r"""The resourceTraitIds field."""
    resource_type_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="resourceTypeIds")] = UNSET
    r"""Search for app entitlements that are for items with resources types that have matching names. Example names are \"group\", \"role\", and \"app\"."""
    risk_level_ids: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="riskLevelIds")] = UNSET
    r"""Search for app entitlements with these risk levels."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["AppEntitlementExpandMask", "accessReviewId", "alias", "appIds", "appUserIds", "complianceFrameworkIds", "excludeAppIds", "excludeAppUserIds", "includeDeleted", "isAutomated", "onlyGetExpiring", "pageSize", "pageToken", "query", "refs", "resourceIds", "resourceTraitIds", "resourceTypeIds", "riskLevelIds"]
        nullable_fields = ["appIds", "appUserIds", "complianceFrameworkIds", "excludeAppIds", "excludeAppUserIds", "refs", "resourceIds", "resourceTraitIds", "resourceTypeIds", "riskLevelIds"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
