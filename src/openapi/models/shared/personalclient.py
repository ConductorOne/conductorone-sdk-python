"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class PersonalClientTypedDict(TypedDict):
    r"""The PersonalClient message contains information about a presonal client credential."""
    
    allow_source_cidr: NotRequired[Nullable[List[str]]]
    r"""If set, only allows the CIDRs in the array to use the credential."""
    client_id: NotRequired[str]
    r"""The clientID of the credential."""
    created_at: NotRequired[datetime]
    deleted_at: NotRequired[datetime]
    display_name: NotRequired[str]
    r"""The display name of the personal client credential."""
    expires_time: NotRequired[datetime]
    id: NotRequired[str]
    r"""The unique ID of the personal client credential."""
    last_used_at: NotRequired[datetime]
    scoped_roles: NotRequired[Nullable[List[str]]]
    r"""scoped_roles provides a list of IAM Roles
    that this OAuth2 Client's API permissions
    are reduced to. The permissions granted to OAuth2 Client
    are AND'ed against the owning User's own permissions.
    """
    updated_at: NotRequired[datetime]
    user_id: NotRequired[str]
    r"""The ID of the user that this credential is created for."""
    

class PersonalClient(BaseModel):
    r"""The PersonalClient message contains information about a presonal client credential."""
    
    allow_source_cidr: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="allowSourceCidr")] = UNSET
    r"""If set, only allows the CIDRs in the array to use the credential."""
    client_id: Annotated[Optional[str], pydantic.Field(alias="clientId")] = None
    r"""The clientID of the credential."""
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    deleted_at: Annotated[Optional[datetime], pydantic.Field(alias="deletedAt")] = None
    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""The display name of the personal client credential."""
    expires_time: Annotated[Optional[datetime], pydantic.Field(alias="expiresTime")] = None
    id: Optional[str] = None
    r"""The unique ID of the personal client credential."""
    last_used_at: Annotated[Optional[datetime], pydantic.Field(alias="lastUsedAt")] = None
    scoped_roles: Annotated[OptionalNullable[List[str]], pydantic.Field(alias="scopedRoles")] = UNSET
    r"""scoped_roles provides a list of IAM Roles
    that this OAuth2 Client's API permissions
    are reduced to. The permissions granted to OAuth2 Client
    are AND'ed against the owning User's own permissions.
    """
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    user_id: Annotated[Optional[str], pydantic.Field(alias="userId")] = None
    r"""The ID of the user that this credential is created for."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["allowSourceCidr", "clientId", "createdAt", "deletedAt", "displayName", "expiresTime", "id", "lastUsedAt", "scopedRoles", "updatedAt", "userId"]
        nullable_fields = ["allowSourceCidr", "scopedRoles"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
