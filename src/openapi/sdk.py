"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, NoOpLogger
from .utils.retries import RetryConfig
import httpx
from openapi._hooks import SDKHooks
from openapi.appaccessrequestsdefaults import AppAccessRequestsDefaults
from openapi.appentitlementowners import AppEntitlementOwners
from openapi.appentitlements import AppEntitlements
from openapi.appentitlementsearch import AppEntitlementSearch
from openapi.appentitlementuserbinding import AppEntitlementUserBinding
from openapi.appowners import AppOwners
from openapi.appreport import AppReport
from openapi.appreportaction import AppReportAction
from openapi.appresource import AppResource
from openapi.appresourceowners import AppResourceOwners
from openapi.appresourcesearch import AppResourceSearch
from openapi.appresourcetype import AppResourceType
from openapi.apps import Apps
from openapi.appsearch import AppSearch
from openapi.appusagecontrols import AppUsageControls
from openapi.appuser import AppUser
from openapi.attributes import Attributes
from openapi.attributesearch import AttributeSearch
from openapi.auth import Auth
from openapi.awsexternalidsettings import AWSExternalIDSettings
from openapi.connector import Connector
from openapi.directory import Directory
from openapi.export import Export
from openapi.exportssearch import ExportsSearch
from openapi.models import shared
from openapi.personalclient import PersonalClient
from openapi.policies import Policies
from openapi.policysearch import PolicySearch
from openapi.policyvalidate import PolicyValidate
from openapi.requestcatalogmanagement import RequestCatalogManagement
from openapi.requestcatalogsearch import RequestCatalogSearch
from openapi.roles import Roles
from openapi.sessionsettings import SessionSettings
from openapi.systemlog import SystemLog
from openapi.task import Task
from openapi.taskactions import TaskActions
from openapi.tasksearch import TaskSearch
from openapi.types import OptionalNullable, UNSET
from openapi.user import User
from openapi.usersearch import UserSearch
import openapi.utils as utils
from openapi.webhooks import Webhooks
from openapi.webhookssearch import WebhooksSearch
from typing import Callable, Dict, List, Optional, Union

class SDK(BaseSDK):
    r"""ConductorOne API: The ConductorOne API is a HTTP API for managing ConductorOne resources."""
    apps: Apps
    app_access_requests_defaults: AppAccessRequestsDefaults
    connector: Connector
    app_entitlements: AppEntitlements
    app_entitlement_search: AppEntitlementSearch
    app_entitlement_user_binding: AppEntitlementUserBinding
    app_entitlement_owners: AppEntitlementOwners
    app_owners: AppOwners
    app_report: AppReport
    app_report_action: AppReportAction
    app_resource_type: AppResourceType
    app_resource: AppResource
    app_resource_owners: AppResourceOwners
    app_usage_controls: AppUsageControls
    app_user: AppUser
    attributes: Attributes
    auth: Auth
    request_catalog_management: RequestCatalogManagement
    directory: Directory
    personal_client: PersonalClient
    roles: Roles
    policies: Policies
    policy_validate: PolicyValidate
    app_resource_search: AppResourceSearch
    app_search: AppSearch
    attribute_search: AttributeSearch
    policy_search: PolicySearch
    request_catalog_search: RequestCatalogSearch
    exports_search: ExportsSearch
    task_search: TaskSearch
    user_search: UserSearch
    webhooks_search: WebhooksSearch
    aws_external_id_settings: AWSExternalIDSettings
    session_settings: SessionSettings
    system_log: SystemLog
    export: Export
    task: Task
    task_actions: TaskActions
    user: User
    webhooks: Webhooks
    def __init__(
        self,
        security: Union[shared.Security, Callable[[], shared.Security]],
        tenant_domain: Optional[str] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param tenant_domain: Allows setting the tenantDomain variable for url substitution
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = NoOpLogger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
        server_defaults: List[Dict[str, str]] = [
            {
                "tenantDomain": tenant_domain or "example",
            },
        ]
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server_idx=server_idx,
            server_defaults=server_defaults,
            retry_config=retry_config,
            timeout_ms=timeout_ms,
            debug_logger=debug_logger
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.apps = Apps(self.sdk_configuration)
        self.app_access_requests_defaults = AppAccessRequestsDefaults(self.sdk_configuration)
        self.connector = Connector(self.sdk_configuration)
        self.app_entitlements = AppEntitlements(self.sdk_configuration)
        self.app_entitlement_search = AppEntitlementSearch(self.sdk_configuration)
        self.app_entitlement_user_binding = AppEntitlementUserBinding(self.sdk_configuration)
        self.app_entitlement_owners = AppEntitlementOwners(self.sdk_configuration)
        self.app_owners = AppOwners(self.sdk_configuration)
        self.app_report = AppReport(self.sdk_configuration)
        self.app_report_action = AppReportAction(self.sdk_configuration)
        self.app_resource_type = AppResourceType(self.sdk_configuration)
        self.app_resource = AppResource(self.sdk_configuration)
        self.app_resource_owners = AppResourceOwners(self.sdk_configuration)
        self.app_usage_controls = AppUsageControls(self.sdk_configuration)
        self.app_user = AppUser(self.sdk_configuration)
        self.attributes = Attributes(self.sdk_configuration)
        self.auth = Auth(self.sdk_configuration)
        self.request_catalog_management = RequestCatalogManagement(self.sdk_configuration)
        self.directory = Directory(self.sdk_configuration)
        self.personal_client = PersonalClient(self.sdk_configuration)
        self.roles = Roles(self.sdk_configuration)
        self.policies = Policies(self.sdk_configuration)
        self.policy_validate = PolicyValidate(self.sdk_configuration)
        self.app_resource_search = AppResourceSearch(self.sdk_configuration)
        self.app_search = AppSearch(self.sdk_configuration)
        self.attribute_search = AttributeSearch(self.sdk_configuration)
        self.policy_search = PolicySearch(self.sdk_configuration)
        self.request_catalog_search = RequestCatalogSearch(self.sdk_configuration)
        self.exports_search = ExportsSearch(self.sdk_configuration)
        self.task_search = TaskSearch(self.sdk_configuration)
        self.user_search = UserSearch(self.sdk_configuration)
        self.webhooks_search = WebhooksSearch(self.sdk_configuration)
        self.aws_external_id_settings = AWSExternalIDSettings(self.sdk_configuration)
        self.session_settings = SessionSettings(self.sdk_configuration)
        self.system_log = SystemLog(self.sdk_configuration)
        self.export = Export(self.sdk_configuration)
        self.task = Task(self.sdk_configuration)
        self.task_actions = TaskActions(self.sdk_configuration)
        self.user = User(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)
    
